"""
Rankers that sort documents based on scores.

This module provides rankers that reorder a knowledge ranking based on numerical
scores assigned to each document. The scores can be generated by any
`KnowledgeScorer`.
"""
from __future__ import annotations
from llobot.knowledge import Knowledge
from llobot.knowledge.ranking import KnowledgeRanking, KnowledgeRankingPrecursor, coerce_ranking
from llobot.knowledge.ranking.lexicographical import LexicographicalRanker
from llobot.knowledge.ranking.rankers import KnowledgeRanker
from llobot.knowledge.scores import KnowledgeScores
from llobot.knowledge.scores.scorers import KnowledgeScorer, standard_scorer
from llobot.utils.values import ValueTypeMixin

def rank_ascending(scores: KnowledgeScores, *, initial: KnowledgeRankingPrecursor | None = None) -> KnowledgeRanking:
    """
    Sorts a ranking in ascending order of scores.

    If an initial ranking is provided, it is sorted. Otherwise, a new
    lexicographically sorted ranking of the scored documents is created
    and then sorted by score.

    Args:
        scores: The scores to use for sorting.
        initial: An optional initial ranking to sort.

    Returns:
        A new ranking sorted by score in ascending order.
    """
    if initial is None:
        ranking = coerce_ranking(scores.keys())
    else:
        ranking = coerce_ranking(initial)
    # Sort by score. The original order is used as a tie-breaker because
    # Python's sort is stable.
    return KnowledgeRanking(sorted(ranking, key=lambda path: scores[path]))

def rank_descending(scores: KnowledgeScores, *, initial: KnowledgeRankingPrecursor | None = None) -> KnowledgeRanking:
    """
    Sorts a ranking in descending order of scores.

    This is a convenience function that calls `rank_ascending` with negated scores.

    Args:
        scores: The scores to use for sorting.
        initial: An optional initial ranking to sort.

    Returns:
        A new ranking sorted by score in descending order.
    """
    return rank_ascending(-scores, initial=initial)

class AscendingRanker(KnowledgeRanker, ValueTypeMixin):
    """
    A ranker that sorts documents in ascending order of their scores.
    """
    _scorer: KnowledgeScorer
    _previous: KnowledgeRanker

    def __init__(self, *,
        scorer: KnowledgeScorer | None = None,
        previous: KnowledgeRanker = LexicographicalRanker()
    ):
        """
        Creates a new `AscendingRanker`.

        Args:
            scorer: The scorer to use for ranking. Defaults to `standard_scorer`.
            previous: The ranker used to create the initial ordering before
                      sorting. Defaults to `LexicographicalRanker`.
        """
        self._scorer = scorer if scorer is not None else standard_scorer()
        self._previous = previous

    def rank(self, knowledge: Knowledge) -> KnowledgeRanking:
        """
        Ranks the knowledge by sorting documents in ascending order of scores.

        Args:
            knowledge: The knowledge base to rank.

        Returns:
            A new ranking sorted by score in ascending order.
        """
        scores = self._scorer.score(knowledge)
        initial = self._previous.rank(knowledge)
        return rank_ascending(scores, initial=initial)

class DescendingRanker(KnowledgeRanker, ValueTypeMixin):
    """
    A ranker that sorts documents in descending order of their scores.
    """
    _scorer: KnowledgeScorer
    _previous: KnowledgeRanker

    def __init__(self, *,
        scorer: KnowledgeScorer | None = None,
        previous: KnowledgeRanker = LexicographicalRanker()
    ):
        """
        Creates a new `DescendingRanker`.

        Args:
            scorer: The scorer to use for ranking. Defaults to `standard_scorer`.
            previous: The ranker used to create the initial ordering before
                      sorting. Defaults to `LexicographicalRanker`.
        """
        self._scorer = scorer if scorer is not None else standard_scorer()
        self._previous = previous

    def rank(self, knowledge: Knowledge) -> KnowledgeRanking:
        """
        Ranks the knowledge by sorting documents in descending order of scores.

        Args:
            knowledge: The knowledge base to rank.

        Returns:
            A new ranking sorted by score in descending order.
        """
        scores = self._scorer.score(knowledge)
        initial = self._previous.rank(knowledge)
        return rank_descending(scores, initial=initial)

__all__ = [
    'rank_ascending',
    'rank_descending',
    'AscendingRanker',
    'DescendingRanker',
]
